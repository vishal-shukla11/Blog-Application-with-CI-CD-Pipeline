name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker-compose build
        docker tag blog-backend:latest $ECR_REGISTRY/blog-backend:latest
        docker tag blog-frontend:latest $ECR_REGISTRY/blog-frontend:latest
        docker push $ECR_REGISTRY/blog-backend:latest
        docker push $ECR_REGISTRY/blog-frontend:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p ~/blog-app
          cd ~/blog-app
          
          cat > docker-compose.yml << 'EOL'
          version: '3'
          services:
            backend:
              image: ${{ steps.login-ecr.outputs.registry }}/blog-backend:latest
              ports:
                - "5000:5000"
            frontend:
              image: ${{ steps.login-ecr.outputs.registry }}/blog-frontend:latest
              ports:
                - "3000:3000"
              depends_on:
                - backend
          EOL
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          docker-compose pull
          docker-compose up -d
